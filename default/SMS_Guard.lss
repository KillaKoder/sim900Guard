
SMS_Guard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  000004b4  00000528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000096  008000d6  0000052a  0000059e  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001b5  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b15  00000000  00000000  000007b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a3  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000869  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00001fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000294  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ec  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_13>
  38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 3d       	cpi	r26, 0xD6	; 214
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a6 ed       	ldi	r26, 0xD6	; 214
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8a:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <init>:

 for(;;){
 }
}

void init(){
  92:	0e 94 3f 01 	call	0x27e	; 0x27e <simInit>
  simInit();
  sei();
  96:	78 94       	sei
  simCommInit();
  98:	0e 94 10 02 	call	0x420	; 0x420 <simCommInit>
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	9f ef       	ldi	r25, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	24 e6       	ldi	r18, 0x64	; 100
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <init+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ac:	d9 f7       	brne	.-10     	; 0xa4 <init+0x12>
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	9f ef       	ldi	r25, 0xFF	; 255
  b2:	24 e6       	ldi	r18, 0x64	; 100
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <init+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <init+0x24>
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	9f ef       	ldi	r25, 0xFF	; 255
  c4:	24 e6       	ldi	r18, 0x64	; 100
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <init+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d0:	d9 f7       	brne	.-10     	; 0xc8 <init+0x36>
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	9f ef       	ldi	r25, 0xFF	; 255
  d6:	24 e6       	ldi	r18, 0x64	; 100
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <init+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e2:	d9 f7       	brne	.-10     	; 0xda <init+0x48>
  delay(8000);
  delay(8000);
  delay(8000);
  delay(8000);
}
  e4:	08 95       	ret

000000e6 <main>:
#include "template.h"

char cmd_buff[80];

int main( void )
{
  e6:	0e 94 49 00 	call	0x92	; 0x92 <init>
 init();

 simSetTextInput();
  ea:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <simSetTextInput>
 simSetPhone();
  ee:	0e 94 5d 01 	call	0x2ba	; 0x2ba <simSetPhone>
 simSendMessage();
  f2:	0e 94 a5 01 	call	0x34a	; 0x34a <simSendMessage>
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <main+0x10>

000000f8 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 10c:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
 10e:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 110:	e0 91 18 01 	lds	r30, 0x0118
 114:	ef 5f       	subi	r30, 0xFF	; 255
 116:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 118:	80 91 19 01 	lds	r24, 0x0119
 11c:	e8 17       	cp	r30, r24
 11e:	11 f4       	brne	.+4      	; 0x124 <__vector_13+0x2c>
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	08 c0       	rjmp	.+16     	; 0x134 <__vector_13+0x3c>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 124:	89 2f       	mov	r24, r25
 126:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 128:	e0 93 18 01 	sts	0x0118, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ea 50       	subi	r30, 0x0A	; 10
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
 134:	80 93 1a 01 	sts	0x011A, r24
}
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 15e:	90 91 16 01 	lds	r25, 0x0116
 162:	80 91 17 01 	lds	r24, 0x0117
 166:	98 17       	cp	r25, r24
 168:	61 f0       	breq	.+24     	; 0x182 <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 16a:	e0 91 17 01 	lds	r30, 0x0117
 16e:	ef 5f       	subi	r30, 0xFF	; 255
 170:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 172:	e0 93 17 01 	sts	0x0117, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ea 52       	subi	r30, 0x2A	; 42
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	80 81       	ld	r24, Z
 17e:	8c b9       	out	0x0c, r24	; 12
 180:	01 c0       	rjmp	.+2      	; 0x184 <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 182:	55 98       	cbi	0x0a, 5	; 10
    }
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 196:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 198:	10 92 16 01 	sts	0x0116, r1
    UART_TxTail = 0;
 19c:	10 92 17 01 	sts	0x0117, r1
    UART_RxHead = 0;
 1a0:	10 92 18 01 	sts	0x0118, r1
    UART_RxTail = 0;
 1a4:	10 92 19 01 	sts	0x0119, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 1a8:	97 ff       	sbrs	r25, 7
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <uart_init+0x1c>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	8b b9       	out	0x0b, r24	; 11
    	 baudrate &= ~0x8000;
 1b0:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 1b2:	30 bd       	out	0x20, r19	; 32
    UBRRL = (unsigned char) baudrate;
 1b4:	29 b9       	out	0x09, r18	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 1b6:	88 e9       	ldi	r24, 0x98	; 152
 1b8:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 1ba:	86 e8       	ldi	r24, 0x86	; 134
 1bc:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 1be:	08 95       	ret

000001c0 <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
 1c0:	90 91 18 01 	lds	r25, 0x0118
 1c4:	80 91 19 01 	lds	r24, 0x0119
 1c8:	98 17       	cp	r25, r24
 1ca:	19 f4       	brne	.+6      	; 0x1d2 <uart_getc+0x12>
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	31 e0       	ldi	r19, 0x01	; 1
 1d0:	12 c0       	rjmp	.+36     	; 0x1f6 <uart_getc+0x36>
    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 1d2:	e0 91 19 01 	lds	r30, 0x0119
 1d6:	ef 5f       	subi	r30, 0xFF	; 255
 1d8:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 1da:	e0 93 19 01 	sts	0x0119, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	ea 50       	subi	r30, 0x0A	; 10
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 1e6:	20 91 1a 01 	lds	r18, 0x011A
 1ea:	92 2f       	mov	r25, r18
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	ac 01       	movw	r20, r24
 1f0:	43 0f       	add	r20, r19
 1f2:	51 1d       	adc	r21, r1
 1f4:	9a 01       	movw	r18, r20

}/* uart_getc */
 1f6:	c9 01       	movw	r24, r18
 1f8:	08 95       	ret

000001fa <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 1fa:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1fc:	90 91 16 01 	lds	r25, 0x0116
 200:	9f 5f       	subi	r25, 0xFF	; 255
 202:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 204:	80 91 17 01 	lds	r24, 0x0117
 208:	98 17       	cp	r25, r24
 20a:	e1 f3       	breq	.-8      	; 0x204 <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 20c:	e9 2f       	mov	r30, r25
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ea 52       	subi	r30, 0x2A	; 42
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 216:	90 93 16 01 	sts	0x0116, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 21a:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
 21c:	08 95       	ret

0000021e <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 21e:	dc 01       	movw	r26, r24
 220:	11 c0       	rjmp	.+34     	; 0x244 <uart_puts+0x26>
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 222:	90 91 16 01 	lds	r25, 0x0116
 226:	9f 5f       	subi	r25, 0xFF	; 255
 228:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 22a:	80 91 17 01 	lds	r24, 0x0117
 22e:	98 17       	cp	r25, r24
 230:	e1 f3       	breq	.-8      	; 0x22a <uart_puts+0xc>
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
      uart_putc(*s++);
 232:	11 96       	adiw	r26, 0x01	; 1
    
    while ( tmphead == UART_TxTail ){
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 234:	e9 2f       	mov	r30, r25
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	ea 52       	subi	r30, 0x2A	; 42
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 23e:	90 93 16 01 	sts	0x0116, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 242:	55 9a       	sbi	0x0a, 5	; 10
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 244:	2c 91       	ld	r18, X
 246:	22 23       	and	r18, r18
 248:	61 f7       	brne	.-40     	; 0x222 <uart_puts+0x4>
      uart_putc(*s++);

}/* uart_puts */
 24a:	08 95       	ret

0000024c <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 24c:	ac 01       	movw	r20, r24
 24e:	10 c0       	rjmp	.+32     	; 0x270 <uart_puts_p+0x24>
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 250:	20 91 16 01 	lds	r18, 0x0116
 254:	2f 5f       	subi	r18, 0xFF	; 255
 256:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 258:	80 91 17 01 	lds	r24, 0x0117
 25c:	28 17       	cp	r18, r24
 25e:	e1 f3       	breq	.-8      	; 0x258 <uart_puts_p+0xc>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 260:	e2 2f       	mov	r30, r18
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ea 52       	subi	r30, 0x2A	; 42
 266:	ff 4f       	sbci	r31, 0xFF	; 255
 268:	90 83       	st	Z, r25
    UART_TxHead = tmphead;
 26a:	20 93 16 01 	sts	0x0116, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 26e:	55 9a       	sbi	0x0a, 5	; 10
 270:	fa 01       	movw	r30, r20
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 272:	4f 5f       	subi	r20, 0xFF	; 255
 274:	5f 4f       	sbci	r21, 0xFF	; 255
 276:	94 91       	lpm	r25, Z+
 278:	99 23       	and	r25, r25
 27a:	51 f7       	brne	.-44     	; 0x250 <uart_puts_p+0x4>
      uart_putc(c);

}/* uart_puts_p */
 27c:	08 95       	ret

0000027e <simInit>:
		}
	}
	return cmd_buff;	
}

void simInit(){
 27e:	80 e3       	ldi	r24, 0x30	; 48
 280:	95 e7       	ldi	r25, 0x75	; 117
 282:	24 e6       	ldi	r18, 0x64	; 100
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	f9 01       	movw	r30, r18
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <simInit+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28e:	d9 f7       	brne	.-10     	; 0x286 <simInit+0x8>
	delay(startDelay);
	SetBit(pwrDDR, pwrPin);
 290:	a6 9a       	sbi	0x14, 6	; 20
	ClrBit(pwrPORT, pwrPin);
 292:	ae 98       	cbi	0x15, 6	; 21
 294:	80 e3       	ldi	r24, 0x30	; 48
 296:	95 e7       	ldi	r25, 0x75	; 117
 298:	24 e6       	ldi	r18, 0x64	; 100
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	f9 01       	movw	r30, r18
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <simInit+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a4:	d9 f7       	brne	.-10     	; 0x29c <simInit+0x1e>
	delay(initDelay);
	ClrBit(pwrDDR, pwrPin);
 2a6:	a6 98       	cbi	0x14, 6	; 20
}
 2a8:	08 95       	ret

000002aa <getCommByte>:
	if (strncasecmp( getAnswer(), messageSendResp, 7) != 0){
	 //sendError
	}	
}

unsigned char getCommByte(unsigned int data){
 2aa:	08 95       	ret

000002ac <sendCRLF>:
	return (data & 0x00FF);
}

void sendCRLF(){
 2ac:	8d e0       	ldi	r24, 0x0D	; 13
 2ae:	0e 94 fd 00 	call	0x1fa	; 0x1fa <uart_putc>
	uart_putc(CR);
	uart_putc(LF);
 2b2:	8a e0       	ldi	r24, 0x0A	; 10
 2b4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <uart_putc>
}
 2b8:	08 95       	ret

000002ba <simSetPhone>:
	if (strncmp( getAnswer(), successResp, 2 ) != 0){
	 //sendError
	}
}

void simSetPhone(){
 2ba:	80 e6       	ldi	r24, 0x60	; 96
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 0f 01 	call	0x21e	; 0x21e <uart_puts>
	uart_puts("AT+CMGS=\"+375447747024\"");
	sendCRLF();
 2c2:	0e 94 56 01 	call	0x2ac	; 0x2ac <sendCRLF>
 2c6:	88 e8       	ldi	r24, 0x88	; 136
 2c8:	93 e1       	ldi	r25, 0x13	; 19
 2ca:	24 e6       	ldi	r18, 0x64	; 100
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <simSetPhone+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <simSetPhone+0x14>
	delay(commDelay);
}
 2d8:	08 95       	ret

000002da <getAnswer>:
char buffer[];

unsigned char getCommByte(unsigned int data);
void sendCRLF();

char *getAnswer(){
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	df 93       	push	r29
 2e4:	cf 93       	push	r28
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	64 97       	sbiw	r28, 0x14	; 20
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	00 e0       	ldi	r16, 0x00	; 0
 2f8:	10 e0       	ldi	r17, 0x00	; 0
		if (c != UART_NO_DATA){
			unsigned char answerChar = getCommByte(c);
			if (answerChar == CR && j!=0){
				break;
			} else if (answerChar != LF && answerChar!= CR){
			  cmd_buff[j] = answerChar;
 2fa:	7e 01       	movw	r14, r28
 2fc:	08 94       	sec
 2fe:	e1 1c       	adc	r14, r1
 300:	f1 1c       	adc	r15, r1
char *getAnswer(){
	char cmd_buff[20];
    unsigned int c = UART_NO_DATA;
	int j=0;
	while(1){
		c = uart_getc();
 302:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <uart_getc>
		if (c != UART_NO_DATA){
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	80 30       	cpi	r24, 0x00	; 0
 30a:	92 07       	cpc	r25, r18
 30c:	d1 f3       	breq	.-12     	; 0x302 <getAnswer+0x28>
			unsigned char answerChar = getCommByte(c);
			if (answerChar == CR && j!=0){
 30e:	8d 30       	cpi	r24, 0x0D	; 13
 310:	21 f4       	brne	.+8      	; 0x31a <getAnswer+0x40>
 312:	01 15       	cp	r16, r1
 314:	11 05       	cpc	r17, r1
 316:	a9 f3       	breq	.-22     	; 0x302 <getAnswer+0x28>
 318:	09 c0       	rjmp	.+18     	; 0x32c <getAnswer+0x52>
				break;
			} else if (answerChar != LF && answerChar!= CR){
 31a:	8a 30       	cpi	r24, 0x0A	; 10
 31c:	91 f3       	breq	.-28     	; 0x302 <getAnswer+0x28>
			  cmd_buff[j] = answerChar;
 31e:	f7 01       	movw	r30, r14
 320:	e0 0f       	add	r30, r16
 322:	f1 1f       	adc	r31, r17
 324:	80 83       	st	Z, r24
			  j++;
 326:	0f 5f       	subi	r16, 0xFF	; 255
 328:	1f 4f       	sbci	r17, 0xFF	; 255
 32a:	eb cf       	rjmp	.-42     	; 0x302 <getAnswer+0x28>
			}
		}
	}
	return cmd_buff;	
}
 32c:	ce 01       	movw	r24, r28
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	64 96       	adiw	r28, 0x14	; 20
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	cf 91       	pop	r28
 33e:	df 91       	pop	r29
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	08 95       	ret

0000034a <simSendMessage>:
	sendCRLF();
	delay(commDelay);
	return getAnswer();
}

void simSendMessage(){
 34a:	88 e7       	ldi	r24, 0x78	; 120
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 0f 01 	call	0x21e	; 0x21e <uart_puts>
	uart_puts("sim900 test");
	sendCRLF();
 352:	0e 94 56 01 	call	0x2ac	; 0x2ac <sendCRLF>
 356:	88 e8       	ldi	r24, 0x88	; 136
 358:	93 e1       	ldi	r25, 0x13	; 19
 35a:	24 e6       	ldi	r18, 0x64	; 100
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	f9 01       	movw	r30, r18
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <simSendMessage+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 364:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 366:	d9 f7       	brne	.-10     	; 0x35e <simSendMessage+0x14>
	delay(commDelay);
	uart_putc(inputEnd);
 368:	8a e1       	ldi	r24, 0x1A	; 26
 36a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <uart_putc>
	if (strncasecmp( getAnswer(), messageSendResp, 7) != 0){
 36e:	0e 94 6d 01 	call	0x2da	; 0x2da <getAnswer>
	 //sendError
	}	
}
 372:	08 95       	ret

00000374 <searchContact>:
	uart_puts("AT+CMGS=\"+375447747024\"");
	sendCRLF();
	delay(commDelay);
}

void *searchContact(char * contact, size_t len){
 374:	ab 01       	movw	r20, r22
	buffer[30] = "AT+CPBF=\"";
 376:	24 e8       	ldi	r18, 0x84	; 132
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	20 93 89 01 	sts	0x0189, r18
	buffer[30] = strncat(buffer, contact, len);
 37e:	bc 01       	movw	r22, r24
 380:	8b e6       	ldi	r24, 0x6B	; 107
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 3a 02 	call	0x474	; 0x474 <strncat>
 388:	80 93 89 01 	sts	0x0189, r24
	buffer[30] = strncat(buffer, "\"", 1);
 38c:	6e e8       	ldi	r22, 0x8E	; 142
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	8b e6       	ldi	r24, 0x6B	; 107
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 2f 02 	call	0x45e	; 0x45e <strcat>
 398:	80 93 89 01 	sts	0x0189, r24
	uart_puts(buffer);
 39c:	8b e6       	ldi	r24, 0x6B	; 107
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 0f 01 	call	0x21e	; 0x21e <uart_puts>
	sendCRLF();
 3a4:	0e 94 56 01 	call	0x2ac	; 0x2ac <sendCRLF>
 3a8:	88 e8       	ldi	r24, 0x88	; 136
 3aa:	93 e1       	ldi	r25, 0x13	; 19
 3ac:	24 e6       	ldi	r18, 0x64	; 100
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	f9 01       	movw	r30, r18
 3b2:	31 97       	sbiw	r30, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <searchContact+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3b8:	d9 f7       	brne	.-10     	; 0x3b0 <searchContact+0x3c>
	delay(commDelay);
	return getAnswer();
 3ba:	0e 94 6d 01 	call	0x2da	; 0x2da <getAnswer>
}
 3be:	08 95       	ret

000003c0 <simSetTextInput>:
			break;
		}	
	}
}

void simSetTextInput(){
 3c0:	80 e9       	ldi	r24, 0x90	; 144
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 0f 01 	call	0x21e	; 0x21e <uart_puts>
	uart_puts("AT+CMGF=1");
	sendCRLF();
 3c8:	0e 94 56 01 	call	0x2ac	; 0x2ac <sendCRLF>
 3cc:	88 e8       	ldi	r24, 0x88	; 136
 3ce:	93 e1       	ldi	r25, 0x13	; 19
 3d0:	24 e6       	ldi	r18, 0x64	; 100
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	f9 01       	movw	r30, r18
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <simSetTextInput+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3dc:	d9 f7       	brne	.-10     	; 0x3d4 <simSetTextInput+0x14>
	delay(commDelay);
	if (strncmp( getAnswer(), successResp, 2 ) != 0){
 3de:	0e 94 6d 01 	call	0x2da	; 0x2da <getAnswer>
	 //sendError
	}
}
 3e2:	08 95       	ret

000003e4 <waitForReg>:
	if (strncmp( getAnswer(), successResp, 2 ) != 0){
	 //sendError
	}
}

void waitForReg(){
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	c4 e6       	ldi	r28, 0x64	; 100
 3ea:	d0 e0       	ldi	r29, 0x00	; 0
	while(1){
		uart_puts("AT+CREG?");
 3ec:	8a e9       	ldi	r24, 0x9A	; 154
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 0f 01 	call	0x21e	; 0x21e <uart_puts>
		sendCRLF();
 3f4:	0e 94 56 01 	call	0x2ac	; 0x2ac <sendCRLF>
 3f8:	80 e3       	ldi	r24, 0x30	; 48
 3fa:	95 e7       	ldi	r25, 0x75	; 117
 3fc:	fe 01       	movw	r30, r28
 3fe:	31 97       	sbiw	r30, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <waitForReg+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 402:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 404:	d9 f7       	brne	.-10     	; 0x3fc <waitForReg+0x18>
		delay(regDelay);
		if (strncmp( getAnswer(), inNetResp, 10 ) == 0){
 406:	0e 94 6d 01 	call	0x2da	; 0x2da <getAnswer>
 40a:	4a e0       	ldi	r20, 0x0A	; 10
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	68 eb       	ldi	r22, 0xB8	; 184
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	0e 94 4a 02 	call	0x494	; 0x494 <strncmp>
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	49 f7       	brne	.-46     	; 0x3ec <waitForReg+0x8>
			break;
		}	
	}
}
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <simCommInit>:
	ClrBit(pwrPORT, pwrPin);
	delay(initDelay);
	ClrBit(pwrDDR, pwrPin);
}

void simCommInit(){
 420:	89 e1       	ldi	r24, 0x19	; 25
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 cb 00 	call	0x196	; 0x196 <uart_init>
 428:	88 e8       	ldi	r24, 0x88	; 136
 42a:	93 e1       	ldi	r25, 0x13	; 19
 42c:	24 e6       	ldi	r18, 0x64	; 100
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	f9 01       	movw	r30, r18
 432:	31 97       	sbiw	r30, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <simCommInit+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 436:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 438:	d9 f7       	brne	.-10     	; 0x430 <simCommInit+0x10>
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
	delay(commDelay);
	uart_puts("AT+IPR=9600");
 43a:	83 ea       	ldi	r24, 0xA3	; 163
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 0f 01 	call	0x21e	; 0x21e <uart_puts>
	sendCRLF();
 442:	0e 94 56 01 	call	0x2ac	; 0x2ac <sendCRLF>
 446:	88 e8       	ldi	r24, 0x88	; 136
 448:	93 e1       	ldi	r25, 0x13	; 19
 44a:	24 e6       	ldi	r18, 0x64	; 100
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	f9 01       	movw	r30, r18
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <simCommInit+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 454:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 456:	d9 f7       	brne	.-10     	; 0x44e <simCommInit+0x2e>
	delay(commDelay);
	if (strncmp( getAnswer(), successResp, 2 ) != 0){
 458:	0e 94 6d 01 	call	0x2da	; 0x2da <getAnswer>
	 //sendError
	}
}
 45c:	08 95       	ret

0000045e <strcat>:
 45e:	fb 01       	movw	r30, r22
 460:	dc 01       	movw	r26, r24
 462:	0d 90       	ld	r0, X+
 464:	00 20       	and	r0, r0
 466:	e9 f7       	brne	.-6      	; 0x462 <strcat+0x4>
 468:	11 97       	sbiw	r26, 0x01	; 1
 46a:	01 90       	ld	r0, Z+
 46c:	0d 92       	st	X+, r0
 46e:	00 20       	and	r0, r0
 470:	e1 f7       	brne	.-8      	; 0x46a <strcat+0xc>
 472:	08 95       	ret

00000474 <strncat>:
 474:	fb 01       	movw	r30, r22
 476:	dc 01       	movw	r26, r24
 478:	0d 90       	ld	r0, X+
 47a:	00 20       	and	r0, r0
 47c:	e9 f7       	brne	.-6      	; 0x478 <strncat+0x4>
 47e:	11 97       	sbiw	r26, 0x01	; 1
 480:	41 50       	subi	r20, 0x01	; 1
 482:	50 40       	sbci	r21, 0x00	; 0
 484:	28 f0       	brcs	.+10     	; 0x490 <strncat+0x1c>
 486:	01 90       	ld	r0, Z+
 488:	00 20       	and	r0, r0
 48a:	0d 92       	st	X+, r0
 48c:	c9 f7       	brne	.-14     	; 0x480 <strncat+0xc>
 48e:	08 95       	ret
 490:	1c 92       	st	X, r1
 492:	08 95       	ret

00000494 <strncmp>:
 494:	fb 01       	movw	r30, r22
 496:	dc 01       	movw	r26, r24
 498:	41 50       	subi	r20, 0x01	; 1
 49a:	50 40       	sbci	r21, 0x00	; 0
 49c:	30 f0       	brcs	.+12     	; 0x4aa <strncmp+0x16>
 49e:	8d 91       	ld	r24, X+
 4a0:	01 90       	ld	r0, Z+
 4a2:	80 19       	sub	r24, r0
 4a4:	19 f4       	brne	.+6      	; 0x4ac <strncmp+0x18>
 4a6:	00 20       	and	r0, r0
 4a8:	b9 f7       	brne	.-18     	; 0x498 <strncmp+0x4>
 4aa:	88 1b       	sub	r24, r24
 4ac:	99 0b       	sbc	r25, r25
 4ae:	08 95       	ret

000004b0 <_exit>:
 4b0:	f8 94       	cli

000004b2 <__stop_program>:
 4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <__stop_program>
